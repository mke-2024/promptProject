import os
import json

# –°–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ JSON
IGNORE_LIST = {
    "folders": {".git", "__pycache__", "venv", "migrations", "backup", "llm_prompts", "grokAPI", "openaiAPI", ".idea"},
    "files": {"project_structure.json", "generate_structure.py"}
}


def get_directory_structure(root_dir):
    """
    –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"–ø–∞–ø–∫–∞": ["file1", "file2", {"subfolder": [...]}]}
    –ò—Å–∫–ª—é—á–∞–µ—Ç –ø–∞–ø–∫–∏ –∏ —Ñ–∞–π–ª—ã –∏–∑ IGNORE_LIST.
    """
    def build_structure(directory):
        items = []
        for item in sorted(os.listdir(directory)):  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            full_path = os.path.join(directory, item)
            if os.path.isdir(full_path):
                if item not in IGNORE_LIST["folders"]:
                    items.append({item: build_structure(full_path)})  # –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            else:
                if item not in IGNORE_LIST["files"]:
                    items.append(item)  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        return items

    project_name = os.path.basename(root_dir)  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
    return {project_name: build_structure(root_dir)}


def print_structure(structure, indent=0, output_lines=None):
    """
    –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—á–∞—Ç–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ –≤–∏–¥–µ –¥–µ—Ä–µ–≤–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ output_lines.
    """
    if output_lines is None:
        output_lines = []

    for folder, contents in structure.items():
        root_line = " " * indent + f"üìÇ {folder}"  # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞
        print(root_line)
        output_lines.append(root_line)
        for item in contents:
            if isinstance(item, dict):
                print_structure(item, indent + 4, output_lines)  # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–µ—á–∞—Ç–∞–µ–º –ø–∞–ø–∫—É
            else:
                line = " " * (indent + 4) + f"üìÑ {item}"  # –§–∞–π–ª
                print(line)
                output_lines.append(line)

    return output_lines


def save_structure():
    """
    –°–æ–±–∏—Ä–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –≤ JSON –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª.
    """
    root_dir = os.path.dirname(os.path.abspath(__file__))  # –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
    structure = get_directory_structure(root_dir)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON
    with open("project_structure.json", "w", encoding="utf-8") as f:
        json.dump(structure, f, indent=4, ensure_ascii=False)

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    print("üì¶ –ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:")
    output_lines = print_structure(structure)  # –ë–µ—Ä–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É
    with open("project_structure.txt", "w", encoding="utf-8") as f:
        f.write("\n".join(output_lines))

    print(f"\n‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ 'project_structure.json' –∏ 'project_structure.txt'")


if __name__ == "__main__":
    save_structure()


